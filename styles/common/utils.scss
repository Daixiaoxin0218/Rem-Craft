@use "sass:map";
@use "sass:math";
@use "sass:list";
@use "var" as *;
@use "function" as *;

@mixin reset-style {
  opacity: 1;
  transform: unset;
  margin: 0;
  padding: 0;
  border: unset;
  border-radius: unset;
  box-shadow: unset;
  background-color: transparent;
  outline: unset;
}

@mixin reset-position {
  top: unset;
  bottom: unset;
  right: unset;
  left: unset;
}

@mixin v-center($h) {
  height: $h;
  line-height: $h;
  vertical-align: middle;
}

@mixin center {
  text-align: center;
  justify-content: center;
  align-items: center;
}

@mixin text-overflow-hidden {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin svg($args...) {
  $w: list.nth($args, 1);
  width: $w;
  height: $w;
  margin: 0;
  @if list.length($args) == 1 {
    padding: 0;
  } @else {
    $svg-w: list.nth($args, 2);
    padding: math.div($w - $svg-w, 2) is-important(list.nth($args, -1));
  }
}

@mixin svg-div($args...) {
  $w: list.nth($args, 1);
  width: $w;
  margin: 0;

  @if list.length($args) == 2 {
    $svg-w: list.nth($args, 2);
    height: $w;
    padding: math.div($w - $svg-w, 2);
    svg {
      @include svg($svg-w);
    }
  }

  @if list.length($args) == 3 {
    @if list.nth($args, 3) != true {
      $svg-w: list.nth($args, 3);
      $h: list.nth($args, 2);
      height: $h;
      padding: math.div($h - $svg-w, 2) math.div($w - $svg-w, 2);
      svg {
        @include svg($svg-w);
      }
    } @else {
      $svg-w: list.nth($args, 2);
      height: $w;
      padding: math.div($w - $svg-w, 2) is-important(list.nth($args, -1));
      svg {
        @include svg($svg-w);
      }
    }
  }

  @if list.length($args) == 4 {
    $svg-w: list.nth($args, 3);
    $h: list.nth($args, 2);
    height: $h;
    padding: math.div($h - $svg-w, 2)
      math.div($w - $svg-w, 2)
      is-important(list.nth($args, -1));
    svg {
      @include svg($svg-w);
    }
  }
}

@mixin item($type, $important: false) {
  background-color: map.get($bg, $type);
  transition: map.get($transition, "all");
  &:hover {
    background-color: map.get($hover, $type) is-important($important);
  }
  &:active {
    background-color: map.get($active, $type) is-important($important);
  }
}

@mixin item-tran($type) {
  @include item($type);
  background-color: transparent;
}

@mixin item-focus($important: false) {
  background-color: map.get($bg, "light") is-important($important);
  &:hover {
    background-color: map.get($bg, "light") is-important($important);
  }
  &:active {
    background-color: map.get($bg, "light") is-important($important);
  }
}

@mixin item-disabled($important: false) {
  cursor: not-allowed;
  color: map.get($text, "disabled");
  &:hover,
  &:active {
    background-color: transparent is-important($important);
  }
  &::after {
    display: none;
  }
}

@mixin item-close($important: false) {
  transition: map.get($transition, "all");
  &:hover {
    color: map.get($text, "anti");
    background-color: map.get($color, "error", "base") is-important($important);
  }
  svg {
    @include svg(map.get($icon, "exsmall"));
  }
}

@mixin icon-btn($type: "page", $w, $svg-w, $important: false) {
  @include svg-div($w, $w, $svg-w);
  @include item($type, $important);

  border-radius: map.get($radius, "base");
}

@mixin component-base($type: "base") {
  font-size: map.get($font-size, $type);
  border-radius: map.get($radius, $type);
  height: map.get($component-size, $type);
}

@mixin component($type: "base") {
  @include component-base($type);
  transition: map.get($transition, "all");

  padding: map.get($component-padding, $type);
  line-height: map.get($component-size, $type) -
    list.nth(map.get($component-padding, $type), 1) * 2;
}

@mixin focus($important: false) {
  color: map.get($text, "brand") is-important($important);
}
